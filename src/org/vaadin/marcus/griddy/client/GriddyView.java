package org.vaadin.marcus.griddy.client;

import java.util.List;

import org.vaadin.marcus.griddy.client.components.GriddyImage;
import org.vaadin.marcus.griddy.client.components.GriddyPanel;
import org.vaadin.marcus.griddy.client.components.GriddyViewer;
import org.vaadin.marcus.griddy.client.event.ImageSelectedListener;
import org.vaadin.marcus.griddy.client.service.ImageService;
import org.vaadin.marcus.griddy.client.service.ImageServiceAsync;

import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.Label;

/**
 * Main view in Griddy, builds layout and listens to events generated by the
 * components. Contains a {@link GriddyPanel}, showing the gallery of images and
 * a {@link GriddyViewer} that displays the full-sized image (hidden by
 * default).
 * 
 * Handles server communication.
 * 
 * @author Marcus Hellberg / Vaadin
 * 
 */
public class GriddyView extends FlowPanel implements ImageSelectedListener {

	protected GriddyPanel griddyPanel;
	protected GriddyViewer griddyViewer;

	protected ImageServiceAsync imageService;

	public GriddyView() {
		setStyleName("griddy-view");

		griddyPanel = new GriddyPanel();
		griddyPanel.addImageSelectedListener(this);

		griddyViewer = new GriddyViewer();
		griddyViewer.addImageSelectedListener(this);

		add(griddyPanel);
		add(griddyViewer);

		showImages();
	}

	/**
	 * Handles image selection events, hiding and showing correct components.
	 */
	@Override
	public void imageSelected(GriddyImage image) {
		if (image != null) {
			griddyViewer.showImage(image);
		} else {
			griddyPanel.resetView();
		}
	}

	/**
	 * Gets images that should be shown from server.
	 */
	protected void showImages() {
		getImageService().getImages(new AsyncCallback<List<String>>() {

			@Override
			public void onSuccess(List<String> result) {
				griddyPanel.showImages(result);
			}

			@Override
			public void onFailure(Throwable caught) {
				showError();
			}
		});
	}

	/**
	 * Display error message to user.
	 */
	protected void showError() {
		Label errorLabel = new Label("UH-OH, something went wrong.");
		errorLabel.setStyleName("error-label");
		add(errorLabel);
	}

	/**
	 * Returns an instance of {@link ImageServiceAsync}, intitiates it if
	 * needed.
	 * 
	 * @return
	 */
	private ImageServiceAsync getImageService() {
		if (imageService == null) {
			imageService = GWT.create(ImageService.class);
		}
		return imageService;
	}

}
